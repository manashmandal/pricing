{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Option","Select","data","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","location","area","weight","weights","selectedArea","cod","pricing","_this2","react_default","a","createElement","className","row","gutter","col","span","es_select","showSearch","style","width","placeholder","onChange","value","setState","Array","from","Set","locations","filterOption","input","option","children","toLowerCase","indexOf","keys","map","l","key","es_button","onClick","type","card","position","margin","concat","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f390e42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Select, Button, Row, Col, Card, Tag } from 'antd';\nimport './App.css';\n\nconst Option = Select.Option;\n\nconst data = require('./data.json');\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      location: \"inside-dhaka\",\n      area: \"Mirpur DOHS\",\n      weight: \"1kg\",\n      weights: [\"1kg\", \"2kg\", \"3kg\"],\n      data: data,\n      selectedArea: [],\n      cod: \"\",\n      pricing: \"\"\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <h1>ডেলিভারি চার্জ ক্যালকুলেটর</h1>\n      <br></br>\n          <Row gutter={24}>\n              <Col span={6}>\n                <Select showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select Location\"\n                        onChange={(value) => this.setState({ location: value, selectedArea: \n                         Array.from(new Set(this.state.data[value].locations))  \n                        })}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}>\n                          { Object.keys(this.state.data).map(l => <Option key={l} value={l}>{l}</Option>) }\n                        </Select>\n              </Col>\n\n              <Col span={6}>\n                <Select showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select Area\"\n                        onChange={(value) => this.setState({ area: value })}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}>\n                          { this.state.selectedArea.map(l => <Option key={l} value={l}>{l}</Option>) }\n                        </Select>\n              </Col>\n\n              <Col span={6}>\n                <Select showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select Weight\"\n                        onChange={(value) => this.setState({ weight: value })}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}>\n                          { this.state.weights.map(l => <Option key={l} value={l}>{l}</Option>) }\n                        </Select>\n              </Col>\n\n              <Col span={6}>\n                  <Button onClick={()=> { \n                          this.setState({\n                            pricing: this.state.data[this.state.location].pricing[this.state.weight],\n                            cod: this.state.data[this.state.location].cod\n                          })\n                   }} type=\"primary\">Calculate</Button>\n              </Col>\n          </Row>\n          <br></br>\n          <br></br>\n          <Row gutter={16}>\n          <Card style={{width: \"100vh\", position: \"relative\", margin: \"auto\"}}>\n              <h1>{ this.state.pricing !== \"\" && `আপনার ডেলিভারি চার্জ ৳${this.state.pricing} + ${this.state.cod} COD`}</h1>\n            </Card>\n          </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}